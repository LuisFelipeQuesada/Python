version: "3.11"

services:
# Databases
  cc_frontend_db:
    build: ./frontend_db/
    hostname: cc_frontend_db
    container_name: cc_frontend_db
    image: cc_frontend_db
    restart: always
    env_file:
     - .env
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_DB:${POSTGRES_DB}
      - POSTGRES_USER:${POSTGRES_USER}
      - POSTGRES_PASSWORD:${POSTGRES_PASSWORD}
    labels:
      - cc_frontend_db
    networks:
      - cc_backend
    ports:
      - 5432
    command: postgres
  cc_keycloak_db:
    build: ./keycloak_db/
    hostname: cc_keycloak_db
    container_name: cc_keycloak_db
    image: cc_keycloak_db
    restart: always
    env_file:
      .env
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_DB:${POSTGRES_DB}
      - POSTGRES_USER:${POSTGRES_USER}
      - POSTGRES_PASSWORD:${POSTGRES_PASSWORD}
    labels:
      - cc_keycloak_db
    networks:
      - cc_backend
    ports:
      - 5432
    command: postgres
# Services
  cc_keycloak:
    build: ./keycloak/
    hostname: cc_keycloak
    container_name: cc_keycloak
    image: cc_keycloak
    restart: always
    environment:
      - KEYCLOAK_CREATE_ADMIN_USER:=true
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=4dm1n
      - KEYCLOAK_MANAGEMENT_USER=manager
      - KEYCLOAK_MANAGEMENT_PASSWORD=bitnami1

      - KEYCLOAK_DATABASE_HOST=cc_keycloak_db_host
      - KEYCLOAK_DATABASE_PORT=5432
      - KEYCLOAK_DATABASE_NAME=bitnami_keycloak
      - KEYCLOAK_DATABASE_USER=bn_keycloak
      - KEYCLOAK_DATABASE_PASSWORD=bn_keycloak
      - KEYCLOAK_DATABASE_SCHEMA=public.
      - KEYCLOAK_JDBC_PARAMS=sslmode=verify-full&connectTimeout=30000

      - KEYCLOAK_HTTP_PORT=8080.
      - KEYCLOAK_HTTPS_PORT=8443.
      - KEYCLOAK_BIND_ADDRESS=0.0.0.0
    depends_on:
      cc_keycloak_db:
        condition: service_started
    labels:
      - cc_keycloak
    networks:
      - cc_backend
    ports: 
      - 8080:8080
      - 8443:8443
    command: start-dev
  cc_frontend:
    build: ./frontend/
    hostname: cc_frontend
    container_name: cc_frontend
    image: cc_frontend
    environment:
     - DJANGO_SETTINGS_MODULE:cc_proyecto.settings
    restart: always
    depends_on:
      cc_frontend_db:
        condition: service_started
    labels:
      - cc_frontend
    networks:
      - cc_backend
      - cc_frontend
    ports:
      - 8000:8000
    volumes:
      - type: bind
        source: ./frontend
        target: /CC/CC/frontend
    command: bash -c "source /CC/CC/frontend/cc_proyecto/cc_venv_frontend/bin/activate && 
                      pip3 install -r /CC/CC/frontend/requirements.txt --no-cache-dir --root-user-action=ignore &&
                      python3 /CC/CC/frontend/cc_proyecto/manage.py makemigrations cc_proyecto && 
                      python3 /CC/CC/frontend/cc_proyecto/manage.py migrate --no-input --run-syncdb && 
                      python3 /CC/CC/frontend/cc_proyecto/manage.py runserver 0.0.0.0:8000"
  cc_minio:
    build: ./minio/
    hostname: cc_minio
    container_name: cc_minio
    image: cc_minio
    restart: always
    labels:
      - cc_minio
    environment:
      - MINIO_ROOT_USER=cc_minio_user
      - MINIO_ROOT_PASSWORD=cc_m1n10_p455
      - MINIO_STORAGE_USE_HTTPS=False
    networks:
      - cc_backend
    ports:
      - 9000:9000
      - 9001:9001
    command: server --address ":9000" --console-address ":9001" /data
    volumes:
      - cc_minio_volume:/data
  cc_worker:
    build: ./worker/
    hostname: cc_worker
    container_name: cc_worker
    image: cc_worker
    restart: always
    environment:
      - PIP_DISABLE_PIP_VERSION_CHECK=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    depends_on:
      cc_minio:
        condition: service_started
    labels:
      - cc_worker
    networks:
      - cc_backend
    ports:
      - 3000:3000
    volumes:
      - type: bind
        source: ./worker
        target: /CC/CC/worker
      - /var/run/docker.sock:/var/run/docker.sock
    command: bash -c "cd /CC/CC && source /CC/CC/worker/volume/cc_venv_worker/bin/activate && 
                      pip3 install -r /CC/CC/worker/requirements.txt --no-cache-dir --root-user-action=ignore &&
                      cd /CC/CC/worker/volume/ && uvicorn cc_worker_api:app --reload --host 0.0.0.0 --port=3000"
  cc_inyector:
    build: ./inyector/
    hostname: cc_inyector
    container_name: cc_inyector
    image: cc_inyector
    restart: always
    environment:
      - PIP_DISABLE_PIP_VERSION_CHECK=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    depends_on:
      cc_kafka:
        condition: service_started
    labels:
      - cc_inyector
    networks:
      - cc_backend
    ports:
      - 4000:4000
    volumes:
      - type: bind
        source: ./inyector
        target: /CC/CC/inyector
    command: bash -c "cd /CC/CC && source /CC/CC/inyector/volume/cc_venv_inyector/bin/activate && 
                      pip3 install -r /CC/CC/inyector/requirements.txt --no-cache-dir --root-user-action=ignore &&
                      cd /CC/CC/inyector/volume/ && python3 cc_inyector.py"
  cc_zookeeper:
    build: ./zookeeper/
    hostname: cc_zookeeper
    container_name: cc_zookeeper
    image: cc_zookeeper
    restart: always
    labels:
      - cc_zookeeper
    networks:
      - cc_backend
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=cc_zookeeper:2888:3888;2181
  cc_kafka:
    build: ./kafka/
    hostname: cc_kafka
    container_name: cc_kafka
    image: cc_kafka
    restart: always
    environment:
      KAFKA_USERNAME: cc_kafka_admin
      KAFKA_PASSWORD: cc_4dm1n_p455
    depends_on:
      cc_zookeeper:
        condition: service_started
    labels:
      - cc_kafka
    networks:
      - cc_backend
    ports:
     - 9092:9092
networks:
  cc_backend:
    name: cc_backend
    driver: bridge
  cc_frontend:
    name: cc_frontend
    driver: bridge
volumes:
  cc_minio_volume:
    name: cc_minio_vol
  cc_worker_volume:
    name: cc_worker_vol
